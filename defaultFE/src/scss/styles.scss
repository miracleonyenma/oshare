//defaults
span{
    color: inherit;
}

// font
@mixin p($val) {
    font-size: 12px + ($val * 3);
}

.p{
    @for $var from 1 through 8 {
        &--#{$var}{
            @include p($var)
        }
    }
}

// values
$bRadius: 10px;
$defValpx: 5px;
$defValem: .5em;

// colors
$main: #17c93d;
$main-trans: rgba(23, 201, 61, 0.12);
$main-2: #1ad65d;
$main-2-trans: rgba(26, 214, 92, 0.12);
$main-3: #1fe581;
$main-3-trans: rgba(31, 229, 130, 0.12);
$dark: #18222b;
$dark-trans: rgba(24, 34, 43, 0.06);
$bg: #fff;
$bg-trans: rgba(255, 255, 255, 0.12);

$colorsList : (
    "main" : $main,
    "main-2" : $main-2,
    "main-3" : $main-3,
    "dark" : $dark,
    "bg" : $bg,
);

:root {
    --main: #{$main};
    --main-trans: #{$main-trans};
    --main-2: #{$main-2};
    --main-3: #{$main-3};
    --dark: #{$dark};
    --dark-trans: #{$dark-trans};
    --bg: #{$bg};
}

$colorsListVar : (
    "main" : var(--main),
    "main-2" : var(--main-2),
    "main-3" : var(--main-3),
    "dark" : var(--dark),
    "dark-trans" : var(--dark-trans),
    "bg" : var(--bg),
);


// layout
.bg {
    >* {
        position: relative;
    }

    &__bg-cont {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        overflow: hidden;

    }

    &__img {
        min-width: 100%;
        position: absolute;
        top: 0;
        left: 0;
        pointer-events: none;

        @supports(object-fit: cover) {
            height: 100%;
            object-fit: cover;
            position: relative;
        }

    }

    @each $color,
    $value in $colorsListVar {
        &--#{$color} {
            background: $value;
            color: var(--bg);
        }
    }

    &--bg{
        color: var(--dark);
    }

}

@mixin glass($color) {
    backdrop-filter: blur(22px);
    border: solid 3px transparentize($color, $amount: 0.68);
    background-clip: padding-box!important;
    background: transparentize($color, $amount: 0.4);
    // box-shadow: 10px 10px 22px transparentize($color, $amount: 0.68);
}

.glass {
    backdrop-filter: blur(22px);
    border: solid 3px transparent;
    background-clip: padding-box!important;

    @each $color,
    $value in $colorsList {
        &--#{$color} {
            background: transparentize($value, $amount: 0.4);
            // box-shadow: 10px 10px 22px transparentize($value, $amount: 0.88);
            border-color: transparentize($value, $amount: 0.88);
        }
    }

    &--bg{
        box-shadow: 10px 10px 22px var(--dark-trans);
        color: var(--dark);
    }
}

@mixin round($val) {
    border-radius: $bRadius * $val;
};

.round{
    @for $val from 0 through 8 {
        &--#{$val}{
            @include round($val);
        }
    }
}

@mixin pad($x, $y, $l, $r, $t, $b) {
    // padding: $x;
}

.pad{
    @for $var from 0 through 8 {
        padding: $var * $defValpx;

        &--t-#{$var}{
            padding-top: $var * $defValpx;

            &-em{
                padding-top: $var * $defValem;
            }
        }

        &--b-#{$var}{
            padding-bottom: $var * $defValpx;

            &-em{
                padding-bottom: $var * $defValem;
            }

        }

        &--y-#{$var}{
            padding-top: $var * $defValpx;
            padding-bottom: $var * $defValpx;

            &-em{
                padding-top: $var * $defValem;
                padding-bottom: $var * $defValem;
            }

        }

        &--x-#{$var}{
            padding-left: $var * $defValpx;
            padding-right: $var * $defValpx;

            &-em{
                padding-left: $var * $defValem;
                padding-right: $var * $defValem;
            }

        }
    }
}